-- Criar tabelas a partir de uma tabela temporaria de captação de dados e criar um cursor 

-- 1° Parte: Criar TEMPDATA e fazer upload doos dados
CREATE TABLE TEMPDATA (
    codigoPedido VARCHAR(6),
    dataPedido DATE,
    SKU VARCHAR(15),
    UPC VARCHAR(3),
    nomeProduto VARCHAR(50),
    qtd INT,
    valor DECIMAL(10, 2),
    frete DECIMAL(10, 2),
    email VARCHAR(50),
    codigoComprador VARCHAR(3),
    nomeComprador VARCHAR(50),
    endereco VARCHAR(100),
    CEP VARCHAR(8),
    UF VARCHAR(2),
    pais VARCHAR(30)
);

LOAD DATA INFILE 'C:/Users/natal/Downloads/pedidos.txt'
INTO TABLE TEMPDATA
FIELDS TERMINATED BY ';' ENCLOSED BY '"' 
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(codigoPedido, dataPedido, SKU, UPC, nomeProduto, qtd, valor, frete, email, codigoComprador, nomeComprador, endereco, CEP, UF, pais);

-- 2° Parte: Criar tabelas cliente, produtos, estoque, pedido, itempedido
CREATE TABLE cliente (
    idCliente INT AUTO_INCREMENT PRIMARY KEY,
    codigoComprador VARCHAR(3) UNIQUE,
    nomeComprador VARCHAR(50),
    email VARCHAR(50),
    endereco VARCHAR(100),
    CEP VARCHAR(8),
    UF VARCHAR(2),
    pais VARCHAR(30)
);

CREATE TABLE produtos (
    idProduto INT AUTO_INCREMENT PRIMARY KEY,
    SKU VARCHAR(15) UNIQUE,
    UPC VARCHAR(3),
    nomeProduto VARCHAR(50),
    valor DECIMAL(10, 2)
);

CREATE TABLE estoque (
    idEstoque INT AUTO_INCREMENT PRIMARY KEY,
    SKU VARCHAR(15) UNIQUE,
    quantidade INT
);

CREATE TABLE pedido (
    idPedido INT AUTO_INCREMENT PRIMARY KEY,
    codigoPedido VARCHAR(6) UNIQUE,
    dataPedido DATE,
    idCliente INT,
    frete DECIMAL(10, 2),
    status VARCHAR(20) DEFAULT 'pendente',
    FOREIGN KEY (idCliente) REFERENCES cliente(idCliente);
);

CREATE TABLE itempedido (
    idItemPedido INT AUTO_INCREMENT PRIMARY KEY,
    idPedido INT,
    idProduto INT,
    quantidade INT,
    valor DECIMAL(10, 2),
    FOREIGN KEY (idPedido) REFERENCES pedido(idPedido),
    FOREIGN KEY (idProduto) REFERENCES produtos(idProduto)
);

CREATE TABLE entrega (
    idEntrega INT AUTO_INCREMENT PRIMARY KEY,
    idPedido INT, 
    idProduto INT, 
    quantidade INT,
    valorTotal DECIMAL(10, 2),
    dataEntrega DATE, 
    statusEntrega VARCHAR(50),
    FOREIGN KEY (idPedido) REFERENCES pedido(idPedido), 
    FOREIGN KEY (idProduto) REFERENCES produtos(idProduto) 
);

CREATE TABLE compra (
    idCompra INT AUTO_INCREMENT PRIMARY KEY,
    idProduto INT, 
    quantidade INT,
    fornecedor VARCHAR(100),
    FOREIGN KEY (idProduto) REFERENCES produtos(idProduto) 
);

-- 3° Parte: Inserir dados nas tabelas a partir da tabela temporária TEMPDATA

INSERT INTO cliente (codigoComprador, nomeComprador, email, endereco, CEP, UF, pais)
SELECT DISTINCT codigoComprador, nomeComprador, email, endereco, CEP, UF, pais
FROM TEMPDATA;

INSERT INTO produtos (SKU, UPC, nomeProduto, valor)
SELECT SKU, UPC, nomeProduto, valor
FROM TEMPDATA
GROUP BY SKU;

INSERT INTO estoque (SKU, quantidade)
SELECT SKU, SUM(qtd) AS quantidade
FROM TEMPDATA
GROUP BY SKU;

INSERT INTO pedido (codigoPedido, dataPedido, idCliente, frete)
SELECT DISTINCT codigoPedido, dataPedido, c.idCliente, frete
FROM TEMPDATA t --apelido tabela
JOIN cliente c ON t.codigoComprador = c.codigoComprador; --o join é para relacionar o codigoComprador com o idCliente, porque cada codigo de comprador referencia um idcliente, basta criar a relação

INSERT INTO itempedido (idPedido, idProduto, quantidade, valor)
SELECT p.idPedido, pr.idProduto, t.qtd, t.valor
FROM TEMPDATA t
JOIN pedido p ON t.codigoPedido = p.codigoPedido
JOIN produtos pr ON t.SKU = pr.SKU;

DROP TABLE TEMPDATA;

--CURSOR 
DELIMITER //

CREATE PROCEDURE processa_pedidos()
BEGIN
    -- Declaração de variáveis
    DECLARE done INT DEFAULT 0;
    DECLARE idPedido INT;
    DECLARE idProduto INT;
    DECLARE qtd INT;
    DECLARE valor DECIMAL(9,2);
    DECLARE estoqueAtual INT;
    DECLARE totalPedido DECIMAL(10,2);
    DECLARE fornecedor VARCHAR(100) DEFAULT 'Fornecedor Padrão';
    
    -- Declara o cursor
    DECLARE pedidoCursor CURSOR FOR
        SELECT p.idPedido, ip.idProduto, ip.quantidade, ip.valor
        FROM pedido p
        INNER JOIN itempedido ip ON ip.idPedido = p.idPedido
        WHERE p.status = 'pendente'
        ORDER BY ip.valor * ip.quantidade DESC;

    -- Declara o manipulador para quando o cursor não retornar mais dados
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    -- Abre o cursor
    OPEN pedidoCursor;

    -- Loop para percorrer os resultados do cursor
    read_loop: LOOP
        -- Busca a próxima linha
        FETCH pedidoCursor INTO idPedido, idProduto, qtd, valor;

        -- Verifica se terminou de percorrer as linhas
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Calcula o valor total do pedido
        SET totalPedido = qtd * valor;

        -- Verifica o estoque atual do produto
        SELECT quantidade INTO estoqueAtual 
        FROM Estoque 
        WHERE idProduto = idProduto 
        LIMIT 1;

        -- Se o estoque for suficiente
        IF estoqueAtual >= qtd THEN
            -- Atualiza o estoque
            UPDATE Estoque
            SET quantidade = quantidade - qtd
            WHERE idProduto = idProduto;

            -- Insere na tabela ENTREGA
            INSERT INTO ENTREGA (idPedido, idProduto, quantidade, valorTotal, dataEntrega, statusEntrega)
            VALUES (idPedido, idProduto, qtd, totalPedido, NOW(), 'Em andamento');

            -- Atualiza o status do pedido
            UPDATE pedido
            SET status = 'Pedido Confirmado'
            WHERE idPedido = idPedido;

        ELSE
            -- Insere na tabela COMPRA com quantidade padrão de 100 unidades
            INSERT INTO COMPRA (idProduto, quantidade, fornecedor)
            VALUES (idProduto, 100, fornecedor);
        END IF;

    END LOOP read_loop;

    -- Fecha o cursor
    CLOSE pedidoCursor;
END //

DELIMITER ;

-- chama o cursor: 
CALL processa_pedidos();
